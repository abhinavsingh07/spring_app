package com.study.dao;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Query;
import javax.sql.DataSource;

import org.hibernate.Criteria;
import org.hibernate.FlushMode;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.criterion.Order;
import org.hibernate.stat.Statistics;
import org.hibernate.transform.DistinctRootEntityResultTransformer;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCallback;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.RowMapper;

import com.study.model.Employee;

public class EmployeeDaoImpl implements EmployeeDao {
	// reference in dispathcher.xml
	private SessionFactory sessionFactory;
	private static Statistics stats;

	public SessionFactory getSessionFactory() {
		return sessionFactory;
	}

	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
		this.stats = sessionFactory.getStatistics();
	}

	@Override
	public List<Employee> getEmployees() {
		// TODO Auto-generated method stub
		Session session = null;
		Transaction tx = null;
		List<Employee> emp = null;
		try {
			session = this.getSessionFactory().openSession();
			tx = session.beginTransaction();
			// example using create query
			emp = session.createQuery("from Employee").list();
			tx.commit();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.close();
		}
		return emp;
	}

	@Override
	public int insertEmployee(Employee emp) {
		// TODO Auto-generated method stub
		Session session = null;
		Transaction tx = null;
		int lastId = 0;
		try {
			session = this.sessionFactory.openSession();
			tx = session.beginTransaction();
			System.out.println(emp);
			// if we not send any column in json payload that column not insert in db
			session.save(emp);
			// if we are sending unique id in payload dt will be inserted as our ids are
			// generated by db
			// get last id inserted
			// lastId = (int) session.createQuery("select max(emp_id) from
			// Employee").uniqueResult();
			tx.commit();

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.close();
		}
		return lastId;
	}

	@Override
	public int updateEmployee(Employee emp) {
		// TODO Auto-generated method stub
		Session session = null;
		Transaction tx = null;
		try {
			session = this.getSessionFactory().openSession();
			tx = session.beginTransaction();
			// when there db values!=emp values then update query runs which is shown in
			// console
			// if same no update query runs
			session.saveOrUpdate(emp);
			tx.commit();

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.close();
		}
		return 0;
	}

	@Override
	public int updateEmployeeSpecific(int id, Employee emp) {
		Session session = null;
		Transaction tx = null;
		try {
			session = this.sessionFactory.openSession();

			org.hibernate.Query query = session.createQuery("update Employee set emp_fname=:fname where emp_id=:empId");
			query.setParameter("fname", emp.getEmp_fname());
			query.setParameter("empId", id);
			tx = session.beginTransaction();
			query.executeUpdate();
			tx.commit();

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.close();
		}
		return id;
	}

	@Override
	public Employee getEmployee(int id) {
		Session session = null;
		Transaction tx = null;
		Employee emp = null;
		try {
			session = this.sessionFactory.openSession();
			tx = session.beginTransaction();
			emp = (Employee) session.get(Employee.class, new Integer(id));
			tx.commit();

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			session.close();
		}
		return emp;
	}

	@Override
	public int testEmployee(Employee emp1) {
		Session session = null;
		Transaction tx = null;
		Employee emp;
		try {
			// example 1 session.flush
//			session = this.sessionFactory.openSession();
//			tx = session.beginTransaction();
//			emp = (Employee) session.get(Employee.class, new Integer(2));
//			System.out.println("emp="+emp);//30000
//			emp.setEmp_salary(20000);
//			//maintains same state b/w cache and db
//			session.flush();//updates value 20000 in db on commit value refelects in db   internally commit=flush+commit
//			Employee nEmp= (Employee) session.get(Employee.class, new Integer(2));
//			System.out.println("nEmp ="+nEmp);//we get 20000 from cache 
//			tx.commit();//db values 20000 changes here 

			// Each session hold its first level cache
			// get vs load
//			session=this.getSessionFactory().openSession();
//			tx=session.beginTransaction();
//			Employee emp2=(Employee) session.get(Employee.class,new Integer(1));
//			System.out.println("emp2:"+emp2);//[emp_id=1, emp_fname=Abhinav, emp_lname=Singh, emp_salary=40000]
//			//this change is in first level cache
//			emp2.setEmp_salary(50000);
//			//this load is from first level cache as using same session this entity is already loaded
//			Employee emp3=(Employee) session.get(Employee.class,new Integer(1));//[emp_id=1, emp_fname=Abhinav, emp_lname=Singh, emp_salary=50000]
//			System.out.println("emp3:"+emp3);
//			tx.commit();//flush+commit
			// merge and update
//			Session s2=this.getSessionFactory().openSession();
//			Transaction t2=s2.beginTransaction();
//			Employee emp4=(Employee) s2.get(Employee.class,1);
//			emp4.setEmp_fname("Sachin");
//			s2.evict(emp4);
//			System.out.println("emp4:"+emp4);
//			//fresh load from db
//			Employee emp5=(Employee) s2.get(Employee.class,1);// [emp_id=1, emp_fname=Abhinav, emp_lname=Singh, emp_salary=50000]
//			
//			//s2.update(emp4);//will throw error coz as we fresh loaded from db there name is Abhinav and s2.update(emp4->is changed)
//			s2.merge(emp4);//it works
////			System.out.println("emp5:"+emp5);
//			t2.commit();
//			s2.close();

			// save and persisit
//			Session s3 = this.getSessionFactory().openSession();
//			Employee emp6 = emp1;
//			System.out.println("emp6" + emp6);
//			s3.persist(emp6);// s3.save(emp6)
//			s3.flush();// save to db
//			s3.evict(emp6);
//			s3.persist(emp6);// s3.save(emp6) works on flush insrt new record if entity not changed
//			s3.flush();// detached entity again persisting error
////			Transaction t3 = s3.beginTransaction();
////			t3.commit();
//
//			s3.close();
			// second level cache
			stats.setStatisticsEnabled(true);
			Session s4 = this.getSessionFactory().openSession();
			Transaction s4transaction = s4.beginTransaction();

			Employee e4 = (Employee) s4.get(Employee.class, 1);
			System.out.println("e4:" + e4);
			s4.evict(e4);
			e4 = (Employee) s4.get(Employee.class, 1);
			System.out.println("e4:" + e4);
			printStats(this.stats, 1);

			e4 = (Employee) s4.get(Employee.class, 1);
			System.out.println("e4:" + e4);
			printStats(this.stats, 1);
			s4.close();

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// session.close();

		}
		return 0;
	}

	private static void printStats(Statistics stats, int i) {
		System.out.println("***** " + i + " *****");
		System.out.println("Fetch Count=" + stats.getEntityFetchCount());
		System.out.println("Second Level Hit Count=" + stats.getSecondLevelCacheHitCount());
		System.out.println("Second Level Miss Count=" + stats.getSecondLevelCacheMissCount());
		System.out.println("Second Level Put Count=" + stats.getSecondLevelCachePutCount());
	}

	private static void printData(Employee emp, Statistics stats, int count) {
		System.out.println(count + ":: Name=" + emp.getEmp_fname() + ", Last name=" + emp.getEmp_lname());
		printStats(stats, count);
	}
}
